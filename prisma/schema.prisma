generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime? @default(now())
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ItemType {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  key       String   @unique
  createdAt DateTime @default(now())
  image     String
  items     Item[]
}

model Location {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  x         Float
  y         Float
  z         Float
  createdAt DateTime @default(now())
  image     String?
  items     Item[]
}

model Item {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity   Int
  createdAt  DateTime @default(now())
  typeId     String   @db.ObjectId
  type       ItemType @relation(fields: [typeId], references: [id])
  locationId String   @db.ObjectId
  location   Location @relation(fields: [locationId], references: [id])
}
